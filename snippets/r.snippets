snippet lib
	library(${1:package})

snippet req
	require(${1:package})

snippet src
	source("${1:file.R}")

snippet ret
	return(${1:code})

snippet mat
	matrix(${1:data}, nrow = ${2:rows}, ncol = ${3:cols})

snippet sg
	setGeneric("${1:generic}", function(${2:x, ...}) {
		standardGeneric("${1:generic}")
	})

snippet sm
	setMethod("${1:generic}", ${2:class}, function(${2:x, ...}) {
		${0}
	})

snippet sc
	setClass("${1:Class}", slots = c(${2:name = "type"}))

snippet if
	if (${1:condition}) {
		${0}
	}

snippet el
	else {
		${0}
	}

snippet ei
	else if (${1:condition}) {
		${0}
	}

snippet fun
	${1:name} <- function(${2:variables}) {
		${0}
	}

snippet for
	for (${1:variable} in ${2:vector}) {
		${0}
	}

snippet while
	while (${1:condition}) {
		${0}
	}

snippet switch
	switch (${1:object},
		${2:case} = ${3:action}
	)

snippet apply
	apply(${1:array}, ${2:margin}, ${3:...})

snippet lapply
	lapply(${1:list}, ${2:function})

snippet sapply
	sapply(${1:list}, ${2:function})

snippet mapply
	mapply(${1:function}, ${2:...})

snippet tapply
	tapply(${1:vector}, ${2:index}, ${3:function})

snippet vapply
	vapply(${1:list}, ${2:function}, FUN.VALUE = ${3:type}, ${4:...})

snippet rapply
	rapply(${1:list}, ${2:function})

snippet ts
	`r paste("#", date(), "------------------------------\n")`

# apply the range function to the first 5
snippet show5
	sapply(${1:list}[ ,1:5], range)

# once you upgrade dplyr
# you'll get a deprecation msg for add_rownames() in favour of tibble::...
snippet addrow
	mtcars %>% tibble::rownames_to_column("car")

snippet bioc
	source("https://bioconductor.org/biocLite.R")
	biocLite()
snippet iflib
	if(!require(${1:package})){install.packages('${1:package}')} library(${1:package})

snippet wantlib
	# Check that required packages are installed:
	want = c("parallel","rjags","runjags","compute.es")
	have = want %in% rownames(installed.packages())
	if ( any(!have) ) { install.packages( want[!have] ) }

snippet gg
	ggplot(${1:data}, aes(${2:aes})) +
	  geom_${3:geom}()

# from https://github.com/dgrtwo/snippets/blob/master/r.snippets
snippet S3
	${1:funcname} <- function(${2:args}, ...) UseMethod("${1:funcname}")

snippet exported
	#' ${1:funcname}
	#'
	#' @param ${2:param} description
	#'
	#' @export
	${1:funcname} <- function(${2:param}) {

#  type !rnorm(5)<Shift-Tab>,
snippet !
	`r eval(parse(text = "$$"))`

# http://stackoverflow.com/questions/43764111/how-to-convert-dtm-to-tdm-in-r
# efficient on memory
snippet tDTM
	t(as.DocumentTermMatrix(slam::as.simple_triplet_matrix(content.dtm),weighting=identity))

# Build a scatter plot with mean and 95% CI
snippet summaryPlot
	library(ggplot2movies)
	set.seed(123)
	movies_small <- movies[sample(nrow(movies), 1000), ]
	movies_small$rating <- factor(round(movies_small$rating))
	ggplot(movies_small, aes(x = rating, y = votes)) +
		geom_point() +
		stat_summary(fun.data = "mean_cl_normal",
			geom = "crossbar",
			width = 0.2,
			col = "red") +
			scale_y_log10()

# Hugo Shortcode: figure: in  Rmd files, include as `r `
snippet hugofig
	htmltools::HTML('{{< figure src="https://bookdown.org/yihui/blogdown/images/logo.png" width="40px" title="">}}')


# in markdown, add an HTML snippet that loooks like a RestructuredText 'Admonition'
# alert-success, alert-info or alert-danger
snippet hugoadmonition
	htmltools::HTML('<div class="alert alert-success alert-info alert-warning alert-danger"><b>NOTE</b></div>')


#Hugo Shortcode: github gist
snippet hugogist
	htmltools::HTML('{{< gist knbknb 1d17caecd9b800d5148a30d537013668/ >}}')


snippet hugo3js_boilerplate
	htmltools::HTML('{{ <div id="webgl-container"></div>
	<script src="static/js/vendor/three.min.js"></script>
	<script src="static/js/threejs-knbknb/threejs-app.js"></script> }}')

# Hugo Shortcode: figure: in  Rmd files, include as `r `
snippet hugofig
	htmltools::HTML('{{< figure src="https://bookdown.org/yihui/blogdown/images/logo.png" width="40px" title="">}}')


snippet totalRow
	# add a last row with "Total:"
	library(tidyverse)
	library(pander)
	forcats::gss_cat %>% 
		filter(race != "Other", marital != "No answer") %>% 
		count(race, marital) %>% 
		bind_rows(summarise_at(., vars(n), funs(sum)) %>% 
			mutate(marital= "**Total**")) %>% 
		pandoc.table()
	
snippet ifRDS
	outfile <- "meetup-r-attendees-2015-2018.RDS"
	if (!file.exists(outfile)) {
		saveRDS(attendees, outfile)
	} else {
		attendees <- readRDS(outfile)
	}

snippet detailsRmd
	# move this above code block(s)
	#<details> 
	#<summary>Show details....</summary> 
	# ...and this below
	#</details> 
	
